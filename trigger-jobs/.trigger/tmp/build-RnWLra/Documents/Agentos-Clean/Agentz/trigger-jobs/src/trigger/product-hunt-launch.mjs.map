{
  "version": 3,
  "sources": ["../../../../../../../../../src/trigger/product-hunt-launch.ts"],
  "sourcesContent": ["import { task, logger, wait } from \"@trigger.dev/sdk/v3\";\n\ninterface ProductHuntLaunchPayload {\n  productName: string;\n  launchDate: string;\n  description: string;\n  website: string;\n  twitterHandle?: string;\n  slackWebhook?: string;\n}\n\nexport const productHuntLaunchTask = task({\n  id: \"product-hunt-launch\",\n  retry: {\n    maxAttempts: 3,\n    minTimeoutInMs: 1000,\n    maxTimeoutInMs: 10000,\n    factor: 2,\n  },\n  run: async (payload: ProductHuntLaunchPayload) => {\n    logger.info(\"Starting Product Hunt launch automation\", { \n      product: payload.productName,\n      launchDate: payload.launchDate \n    });\n\n    // Wait until launch date\n    const launchDateTime = new Date(payload.launchDate);\n    logger.info(\"Waiting until launch date\", { launchDateTime });\n    \n    await wait.until({ date: launchDateTime });\n    \n    logger.info(\"Launch date reached! Starting automation sequence\");\n\n    // Step 1: Send launch notification\n    if (payload.slackWebhook) {\n      await sendSlackNotification(payload);\n    }\n\n    // Step 2: Post to social media\n    if (payload.twitterHandle) {\n      await scheduleTwitterPosts(payload);\n    }\n\n    // Step 3: Monitor and send updates throughout the day\n    await monitorLaunchDay(payload);\n\n    logger.info(\"Product Hunt launch automation completed\", {\n      product: payload.productName\n    });\n\n    return {\n      success: true,\n      product: payload.productName,\n      launchDate: payload.launchDate,\n      completedAt: new Date().toISOString()\n    };\n  },\n});\n\nasync function sendSlackNotification(payload: ProductHuntLaunchPayload) {\n  logger.info(\"Sending Slack notification\");\n  \n  try {\n    const response = await fetch(payload.slackWebhook!, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        text: `üöÄ ${payload.productName} is now live on Product Hunt!`,\n        blocks: [\n          {\n            type: \"section\",\n            text: {\n              type: \"mrkdwn\",\n              text: `*üöÄ ${payload.productName} is now live on Product Hunt!*\\n\\n${payload.description}\\n\\n<${payload.website}|Visit Website>`\n            }\n          }\n        ]\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Slack notification failed: ${response.statusText}`);\n    }\n\n    logger.info(\"Slack notification sent successfully\");\n  } catch (error) {\n    logger.error(\"Failed to send Slack notification\", { error });\n    throw error;\n  }\n}\n\nasync function scheduleTwitterPosts(payload: ProductHuntLaunchPayload) {\n  logger.info(\"Scheduling Twitter posts\");\n  \n  const tweets = [\n    `üöÄ We're live on Product Hunt! ${payload.productName} - ${payload.description} Check it out: ${payload.website} #ProductHunt #Launch`,\n    `üéâ Thank you to everyone supporting ${payload.productName} on Product Hunt today! Your votes mean the world to us üôè`,\n    `‚è∞ Last chance to support ${payload.productName} on Product Hunt! Every vote counts üó≥Ô∏è ${payload.website}`\n  ];\n\n  // Schedule tweets throughout the day\n  const tweetTimes = [0, 4, 8]; // Hours after launch\n  \n  for (let i = 0; i < tweets.length; i++) {\n    const tweetTime = new Date(Date.now() + (tweetTimes[i] * 60 * 60 * 1000));\n    logger.info(`Scheduling tweet ${i + 1} for ${tweetTime.toISOString()}`);\n    \n    // In a real implementation, this would integrate with Twitter API\n    // For now, we'll just log the scheduled tweets\n    await wait.until({ date: tweetTime });\n    logger.info(`Tweet ${i + 1} would be posted now`, { content: tweets[i] });\n  }\n}\n\nasync function monitorLaunchDay(payload: ProductHuntLaunchPayload) {\n  logger.info(\"Starting launch day monitoring\");\n  \n  // Monitor for 12 hours with updates every 2 hours\n  const monitoringHours = 12;\n  const updateInterval = 2;\n  \n  for (let hour = 0; hour < monitoringHours; hour += updateInterval) {\n    await wait.for({ hours: updateInterval });\n    \n    logger.info(`Launch day update - ${hour + updateInterval} hours elapsed`, {\n      product: payload.productName,\n      hoursElapsed: hour + updateInterval\n    });\n    \n    // In a real implementation, this would:\n    // - Check Product Hunt ranking\n    // - Send progress updates to Slack\n    // - Trigger additional marketing actions based on performance\n  }\n  \n  logger.info(\"Launch day monitoring completed\");\n} "],
  "mappings": "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",
  "names": []
}
