{
  "version": 3,
  "sources": ["../../../../../../../../../src/trigger/content-generation.ts"],
  "sourcesContent": ["import { task, logger, wait } from \"@trigger.dev/sdk/v3\";\n\ninterface ContentGenerationPayload {\n  contentType: 'blog-post' | 'social-media' | 'email-campaign' | 'product-description';\n  topic: string;\n  targetAudience: string;\n  tone: 'professional' | 'casual' | 'friendly' | 'technical';\n  platforms?: string[];\n  scheduledDate?: string;\n  integrations: {\n    notion?: {\n      databaseId: string;\n      apiKey: string;\n    };\n    slack?: {\n      webhook: string;\n      channel: string;\n    };\n  };\n}\n\nexport const contentGenerationTask = task({\n  id: \"content-generation\",\n  retry: {\n    maxAttempts: 3,\n    minTimeoutInMs: 2000,\n    maxTimeoutInMs: 15000,\n    factor: 2,\n  },\n  run: async (payload: ContentGenerationPayload) => {\n    logger.info(\"Starting content generation automation\", { \n      contentType: payload.contentType,\n      topic: payload.topic,\n      targetAudience: payload.targetAudience\n    });\n\n    // Step 1: Generate content based on type\n    const generatedContent = await generateContent(payload);\n    \n    // Step 2: If scheduled, wait until the scheduled time\n    if (payload.scheduledDate) {\n      const scheduledDateTime = new Date(payload.scheduledDate);\n      logger.info(\"Waiting until scheduled publication date\", { scheduledDateTime });\n      await wait.until({ date: scheduledDateTime });\n    }\n\n    // Step 3: Publish to integrations\n    const publishResults = await publishContent(payload, generatedContent);\n\n    // Step 4: Send notifications\n    await sendCompletionNotifications(payload, generatedContent, publishResults);\n\n    logger.info(\"Content generation automation completed\", {\n      contentType: payload.contentType,\n      topic: payload.topic\n    });\n\n    return {\n      success: true,\n      contentType: payload.contentType,\n      topic: payload.topic,\n      generatedContent,\n      publishResults,\n      completedAt: new Date().toISOString()\n    };\n  },\n});\n\nasync function generateContent(payload: ContentGenerationPayload) {\n  logger.info(\"Generating content\", { contentType: payload.contentType });\n\n  // In a real implementation, this would call OpenAI or another LLM\n  // For now, we'll simulate content generation\n  await wait.for({ seconds: 5 }); // Simulate processing time\n\n  const contentTemplates = {\n    'blog-post': {\n      title: `The Ultimate Guide to ${payload.topic}`,\n      content: `# The Ultimate Guide to ${payload.topic}\\n\\nThis comprehensive guide covers everything you need to know about ${payload.topic} for ${payload.targetAudience}.\\n\\n## Introduction\\n\\nIn today's fast-paced world, understanding ${payload.topic} is crucial for ${payload.targetAudience}.\\n\\n## Key Points\\n\\n1. Understanding the basics\\n2. Advanced techniques\\n3. Best practices\\n4. Common pitfalls to avoid\\n\\n## Conclusion\\n\\nBy following these guidelines, you'll be well-equipped to master ${payload.topic}.`,\n      wordCount: 250,\n      readingTime: '2 min'\n    },\n    'social-media': {\n      posts: [\n        `🚀 Excited to share insights about ${payload.topic}! Perfect for ${payload.targetAudience} looking to level up. #${payload.topic.replace(/\\s+/g, '')}`,\n        `💡 Pro tip: When working with ${payload.topic}, remember that consistency is key. What's your experience? Share below! 👇`,\n        `🎯 Quick question for ${payload.targetAudience}: What's your biggest challenge with ${payload.topic}? Let's discuss! 💬`\n      ],\n      hashtags: [`#${payload.topic.replace(/\\s+/g, '')}`, '#productivity', '#tips'],\n      platforms: payload.platforms || ['twitter', 'linkedin']\n    },\n    'email-campaign': {\n      subject: `Master ${payload.topic}: Essential Tips for ${payload.targetAudience}`,\n      preheader: `Everything you need to know about ${payload.topic}`,\n      content: `Hi there!\\n\\nWe've put together some essential insights about ${payload.topic} specifically for ${payload.targetAudience}.\\n\\nKey takeaways:\\n• Understanding the fundamentals\\n• Practical implementation strategies\\n• Common mistakes to avoid\\n\\nReady to dive deeper? Let's get started!\\n\\nBest regards,\\nThe Team`,\n      cta: 'Learn More'\n    },\n    'product-description': {\n      title: `${payload.topic} Solution`,\n      shortDescription: `The perfect ${payload.topic} solution for ${payload.targetAudience}`,\n      longDescription: `Our comprehensive ${payload.topic} solution is designed specifically for ${payload.targetAudience}. With advanced features and intuitive design, it's the perfect tool to streamline your workflow and boost productivity.`,\n      features: [\n        'Easy to use interface',\n        'Advanced automation',\n        'Real-time analytics',\n        '24/7 support'\n      ],\n      benefits: [\n        'Save time and effort',\n        'Increase productivity',\n        'Better results',\n        'Peace of mind'\n      ]\n    }\n  };\n\n  const content = contentTemplates[payload.contentType];\n  \n  logger.info(\"Content generated successfully\", { \n    contentType: payload.contentType,\n    contentPreview: typeof content === 'object' ? JSON.stringify(content).substring(0, 100) + '...' : content\n  });\n\n  return content;\n}\n\nasync function publishContent(payload: ContentGenerationPayload, content: any) {\n  logger.info(\"Publishing content to integrations\");\n  const results: any = {};\n\n  // Publish to Notion if configured\n  if (payload.integrations.notion) {\n    try {\n      logger.info(\"Publishing to Notion\");\n      \n      // In a real implementation, this would use the Notion API\n      await wait.for({ seconds: 2 }); // Simulate API call\n      \n      results.notion = {\n        success: true,\n        pageId: 'notion-page-' + Date.now(),\n        url: `https://notion.so/page-${Date.now()}`\n      };\n      \n      logger.info(\"Successfully published to Notion\", results.notion);\n    } catch (error) {\n      logger.error(\"Failed to publish to Notion\", { error });\n      results.notion = { success: false, error: error.message };\n    }\n  }\n\n  // Send to Slack if configured\n  if (payload.integrations.slack) {\n    try {\n      logger.info(\"Sending content summary to Slack\");\n      \n      const slackMessage = {\n        text: `📝 New ${payload.contentType} generated!`,\n        blocks: [\n          {\n            type: \"section\",\n            text: {\n              type: \"mrkdwn\",\n              text: `*📝 New ${payload.contentType} generated!*\\n\\n*Topic:* ${payload.topic}\\n*Target Audience:* ${payload.targetAudience}\\n*Tone:* ${payload.tone}`\n            }\n          }\n        ]\n      };\n\n      const response = await fetch(payload.integrations.slack.webhook, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(slackMessage)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Slack API error: ${response.statusText}`);\n      }\n\n      results.slack = { success: true, channel: payload.integrations.slack.channel };\n      logger.info(\"Successfully sent to Slack\", results.slack);\n    } catch (error) {\n      logger.error(\"Failed to send to Slack\", { error });\n      results.slack = { success: false, error: error.message };\n    }\n  }\n\n  return results;\n}\n\nasync function sendCompletionNotifications(payload: ContentGenerationPayload, content: any, publishResults: any) {\n  logger.info(\"Sending completion notifications\");\n\n  // Summary of what was accomplished\n  const summary = {\n    contentType: payload.contentType,\n    topic: payload.topic,\n    targetAudience: payload.targetAudience,\n    tone: payload.tone,\n    publishedTo: Object.keys(publishResults).filter(key => publishResults[key].success),\n    failedPublications: Object.keys(publishResults).filter(key => !publishResults[key].success)\n  };\n\n  logger.info(\"Content generation summary\", summary);\n\n  // In a real implementation, this could:\n  // - Send email notifications\n  // - Update project management tools\n  // - Trigger follow-up workflows\n  // - Log analytics events\n\n  return summary;\n} "],
  "mappings": "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",
  "names": []
}
