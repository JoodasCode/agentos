{
  "version": 3,
  "sources": ["../../../../../../../../../src/trigger/analytics-tracking.ts"],
  "sourcesContent": ["import { task, logger, wait } from \"@trigger.dev/sdk/v3\";\n\ninterface AnalyticsTrackingPayload {\n  eventType: string;\n  userId: string;\n  properties: Record<string, any>;\n  scheduledDate?: string;\n  timestamp: string;\n}\n\nexport const analyticsTrackingTask = task({\n  id: \"analytics-tracking\",\n  retry: {\n    maxAttempts: 3,\n    minTimeoutInMs: 1000,\n    maxTimeoutInMs: 10000,\n    factor: 2,\n  },\n  run: async (payload: AnalyticsTrackingPayload) => {\n    logger.info(\"Starting analytics tracking automation\", { \n      eventType: payload.eventType,\n      userId: payload.userId \n    });\n\n    // Wait until scheduled date if provided\n    if (payload.scheduledDate) {\n      const scheduledDateTime = new Date(payload.scheduledDate);\n      logger.info(\"Waiting until scheduled date\", { scheduledDateTime });\n      \n      await wait.until({ date: scheduledDateTime });\n    }\n\n    // Step 1: Process event data\n    logger.info(\"Processing event data\", { eventType: payload.eventType });\n    \n    const processedEvent = {\n      ...payload.properties,\n      event_type: payload.eventType,\n      user_id: payload.userId,\n      timestamp: payload.timestamp,\n      processed_at: new Date().toISOString(),\n      session_id: `session_${Date.now()}`,\n      source: \"agentos_automation\"\n    };\n\n    // Step 2: Send to analytics platforms\n    logger.info(\"Sending to analytics platforms\");\n    \n    const analyticsResults: Array<{\n      platform: string;\n      status: string;\n      event_id?: string;\n      error?: string;\n    }> = [];\n    \n    // Google Analytics 4 (example)\n    try {\n      // In real implementation, use GA4 Measurement Protocol\n      logger.info(\"Sending to Google Analytics 4\");\n      analyticsResults.push({\n        platform: \"google_analytics\",\n        status: \"success\",\n        event_id: `ga4_${Date.now()}`\n      });\n    } catch (error) {\n      logger.error(\"Failed to send to Google Analytics\", { error });\n      analyticsResults.push({\n        platform: \"google_analytics\",\n        status: \"failed\",\n        error: error.message\n      });\n    }\n\n    // Mixpanel (example)\n    try {\n      logger.info(\"Sending to Mixpanel\");\n      analyticsResults.push({\n        platform: \"mixpanel\",\n        status: \"success\",\n        event_id: `mp_${Date.now()}`\n      });\n    } catch (error) {\n      logger.error(\"Failed to send to Mixpanel\", { error });\n      analyticsResults.push({\n        platform: \"mixpanel\",\n        status: \"failed\",\n        error: error.message\n      });\n    }\n\n    // Step 3: Store in data warehouse\n    logger.info(\"Storing in data warehouse\");\n    \n    const warehouseResult = {\n      stored_at: new Date().toISOString(),\n      record_id: `warehouse_${Date.now()}`,\n      table: \"user_events\",\n      status: \"success\"\n    };\n\n    // Step 4: Trigger alerts if needed\n    const alertsTriggered: Array<{\n      type: string;\n      message: string;\n      triggered_at: string;\n    }> = [];\n    \n    if (payload.eventType === \"product_launch\" || payload.eventType === \"signup_spike\") {\n      logger.info(\"Triggering alerts for critical event\");\n      \n      alertsTriggered.push({\n        type: \"slack_notification\",\n        message: `Critical event detected: ${payload.eventType}`,\n        triggered_at: new Date().toISOString()\n      });\n    }\n\n    // Step 5: Update real-time dashboards\n    logger.info(\"Updating real-time dashboards\");\n    \n    const dashboardUpdates = [\n      {\n        dashboard: \"product_metrics\",\n        updated_at: new Date().toISOString(),\n        status: \"success\"\n      },\n      {\n        dashboard: \"user_activity\",\n        updated_at: new Date().toISOString(),\n        status: \"success\"\n      }\n    ];\n\n    const result = {\n      success: true,\n      event_processed: processedEvent,\n      analytics_results: analyticsResults,\n      warehouse_result: warehouseResult,\n      alerts_triggered: alertsTriggered,\n      dashboard_updates: dashboardUpdates,\n      completed_at: new Date().toISOString(),\n      processing_time_ms: Date.now() - new Date(payload.timestamp).getTime()\n    };\n\n    logger.info(\"Analytics tracking automation completed\", {\n      eventType: payload.eventType,\n      platformsProcessed: analyticsResults.length,\n      alertsTriggered: alertsTriggered.length\n    });\n\n    return result;\n  },\n}); "],
  "mappings": "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",
  "names": []
}
